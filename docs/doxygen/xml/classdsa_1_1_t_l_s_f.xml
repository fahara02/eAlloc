<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classdsa_1_1_t_l_s_f" kind="class" language="C++" prot="public">
    <compoundname>dsa::TLSF</compoundname>
    <includes refid="tlsf_8hpp" local="no">tlsf.hpp</includes>
    <innerclass refid="structdsa_1_1_t_l_s_f_1_1_block_header" prot="public">dsa::TLSF::BlockHeader</innerclass>
    <innerclass refid="structdsa_1_1_t_l_s_f_1_1_control" prot="public">dsa::TLSF::Control</innerclass>
    <innerclass refid="structdsa_1_1_t_l_s_f_1_1_second_level" prot="public">dsa::TLSF::SecondLevel</innerclass>
    <templateparamlist>
      <param>
        <type>size_t</type>
        <declname>SLI</declname>
        <defname>SLI</defname>
        <defval>5</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classdsa_1_1_t_l_s_f_1a5c41d39610f61b576a64cb4e02dd565c" prot="private" static="no">
        <type>char</type>
        <definition>typedef char dsa::TLSF&lt; SLI &gt;::static_assert__LINE__[(sizeof(unsigned int) *CHAR_BIT &gt;=SLI_COUNT) ? 1 :-1]</definition>
        <argsstring>[(sizeof(unsigned int) *CHAR_BIT &gt;=SLI_COUNT) ? 1 :-1]</argsstring>
        <name>static_assert__LINE__</name>
        <qualifiedname>dsa::TLSF::static_assert__LINE__</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="77" column="20" bodyfile="src/tlsf.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdsa_1_1_t_l_s_f_1a4dd5874169334b079e6886a53c795589" prot="private" static="no">
        <type>char</type>
        <definition>typedef char dsa::TLSF&lt; SLI &gt;::static_assert__LINE__[(BLOCK_ALIGNMENT==SMALL_BLOCK_SIZE/SLI_COUNT) ? 1 :-1]</definition>
        <argsstring>[(BLOCK_ALIGNMENT==SMALL_BLOCK_SIZE/SLI_COUNT) ? 1 :-1]</argsstring>
        <name>static_assert__LINE__</name>
        <qualifiedname>dsa::TLSF::static_assert__LINE__</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="78" column="20" bodyfile="src/tlsf.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classdsa_1_1_t_l_s_f_1a87a00ee083c05e19c43adac02c5d2c26" prot="public" static="no">
        <type>ptrdiff_t</type>
        <definition>typedef ptrdiff_t dsa::TLSF&lt; SLI &gt;::tlsfptr_t</definition>
        <argsstring></argsstring>
        <name>tlsfptr_t</name>
        <qualifiedname>dsa::TLSF::tlsfptr_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="95" column="23" bodyfile="src/tlsf.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdsa_1_1_t_l_s_f_1ac2e907fdaba5c8fc4c9185a632d8efe6" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* dsa::TLSF&lt; SLI &gt;::tlsf_walker) (void *ptr, size_t size, int used, void *user)</definition>
        <argsstring>)(void *ptr, size_t size, int used, void *user)</argsstring>
        <name>tlsf_walker</name>
        <qualifiedname>dsa::TLSF::tlsf_walker</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="96" column="13" bodyfile="src/tlsf.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1a7f65c711cb6725696970774320d73895" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::SL_INDEX_LOG2</definition>
        <argsstring></argsstring>
        <name>SL_INDEX_LOG2</name>
        <qualifiedname>dsa::TLSF::SL_INDEX_LOG2</qualifiedname>
        <initializer>= SLI</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="52" column="29" bodyfile="src/tlsf.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1ab129613ed2f692569608a6e438c60d43" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::ALIGN_SIZE_LOG2</definition>
        <argsstring></argsstring>
        <name>ALIGN_SIZE_LOG2</name>
        <qualifiedname>dsa::TLSF::ALIGN_SIZE_LOG2</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="53" column="29" bodyfile="src/tlsf.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1a882d30dfb67c91f27dffe235be08421b" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::BLOCK_ALIGNMENT</definition>
        <argsstring></argsstring>
        <name>BLOCK_ALIGNMENT</name>
        <qualifiedname>dsa::TLSF::BLOCK_ALIGNMENT</qualifiedname>
        <initializer>= (1 &lt;&lt; <ref refid="classdsa_1_1_t_l_s_f_1ab129613ed2f692569608a6e438c60d43" kindref="member">ALIGN_SIZE_LOG2</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="54" column="29" bodyfile="src/tlsf.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1aca7f46fa2019c78935d41e6b70576285" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::FL_INDEX_MAX</definition>
        <argsstring></argsstring>
        <name>FL_INDEX_MAX</name>
        <qualifiedname>dsa::TLSF::FL_INDEX_MAX</qualifiedname>
        <initializer>= 31</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="55" column="29" bodyfile="src/tlsf.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1a7c40f02bc93658db4abe068103a35db5" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::SLI_COUNT</definition>
        <argsstring></argsstring>
        <name>SLI_COUNT</name>
        <qualifiedname>dsa::TLSF::SLI_COUNT</qualifiedname>
        <initializer>= (1 &lt;&lt; <ref refid="classdsa_1_1_t_l_s_f_1a7f65c711cb6725696970774320d73895" kindref="member">SL_INDEX_LOG2</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="56" column="29" bodyfile="src/tlsf.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1a8d8e01ead196273867c2b41e8927ca76" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::FL_INDEX_SHIFT</definition>
        <argsstring></argsstring>
        <name>FL_INDEX_SHIFT</name>
        <qualifiedname>dsa::TLSF::FL_INDEX_SHIFT</qualifiedname>
        <initializer>= (<ref refid="classdsa_1_1_t_l_s_f_1a7f65c711cb6725696970774320d73895" kindref="member">SL_INDEX_LOG2</ref> + <ref refid="classdsa_1_1_t_l_s_f_1ab129613ed2f692569608a6e438c60d43" kindref="member">ALIGN_SIZE_LOG2</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="57" column="29" bodyfile="src/tlsf.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1a4a3f725786424821919caeda3fc46c31" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::FL_INDEX_COUNT</definition>
        <argsstring></argsstring>
        <name>FL_INDEX_COUNT</name>
        <qualifiedname>dsa::TLSF::FL_INDEX_COUNT</qualifiedname>
        <initializer>= (<ref refid="classdsa_1_1_t_l_s_f_1aca7f46fa2019c78935d41e6b70576285" kindref="member">FL_INDEX_MAX</ref> - <ref refid="classdsa_1_1_t_l_s_f_1a8d8e01ead196273867c2b41e8927ca76" kindref="member">FL_INDEX_SHIFT</ref> + 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="58" column="29" bodyfile="src/tlsf.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1ac3ccc1c32d236a03bb2f0382b59557fd" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::SMALL_BLOCK_SIZE</definition>
        <argsstring></argsstring>
        <name>SMALL_BLOCK_SIZE</name>
        <qualifiedname>dsa::TLSF::SMALL_BLOCK_SIZE</qualifiedname>
        <initializer>= (1 &lt;&lt; <ref refid="classdsa_1_1_t_l_s_f_1a8d8e01ead196273867c2b41e8927ca76" kindref="member">FL_INDEX_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="59" column="29" bodyfile="src/tlsf.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1a9e9ae52d67bb0faf1920c4c4b8376adc" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::ALIGN_SIZE</definition>
        <argsstring></argsstring>
        <name>ALIGN_SIZE</name>
        <qualifiedname>dsa::TLSF::ALIGN_SIZE</qualifiedname>
        <initializer>= <ref refid="classdsa_1_1_t_l_s_f_1a882d30dfb67c91f27dffe235be08421b" kindref="member">BLOCK_ALIGNMENT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="60" column="29" bodyfile="src/tlsf.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1a03169d6bc1a82126fb21b79025546622" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::free_bit</definition>
        <argsstring></argsstring>
        <name>free_bit</name>
        <qualifiedname>dsa::TLSF::free_bit</qualifiedname>
        <initializer>= 1 &lt;&lt; 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="67" column="29" bodyfile="src/tlsf.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1aa8384db13c8af386f1d045f57c4ab2a2" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::prev_free_bit</definition>
        <argsstring></argsstring>
        <name>prev_free_bit</name>
        <qualifiedname>dsa::TLSF::prev_free_bit</qualifiedname>
        <initializer>= 1 &lt;&lt; 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="68" column="29" bodyfile="src/tlsf.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1ae5fb2e3596c3c6e5b158f1ea583b57ad" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::flag_mask</definition>
        <argsstring></argsstring>
        <name>flag_mask</name>
        <qualifiedname>dsa::TLSF::flag_mask</qualifiedname>
        <initializer>= <ref refid="classdsa_1_1_t_l_s_f_1aa8384db13c8af386f1d045f57c4ab2a2" kindref="member">prev_free_bit</ref> | <ref refid="classdsa_1_1_t_l_s_f_1a03169d6bc1a82126fb21b79025546622" kindref="member">free_bit</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="69" column="29" bodyfile="src/tlsf.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1a06de927aa2f1743e93856f9429881a03" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::block_header_overhead</definition>
        <argsstring></argsstring>
        <name>block_header_overhead</name>
        <qualifiedname>dsa::TLSF::block_header_overhead</qualifiedname>
        <initializer>= sizeof(size_t)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="71" column="29" bodyfile="src/tlsf.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1ad0a3c2a58f2ac0c556c0e826b310f0e7" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::block_start_offset</definition>
        <argsstring></argsstring>
        <name>block_start_offset</name>
        <qualifiedname>dsa::TLSF::block_start_offset</qualifiedname>
        <initializer>=
        offsetof(<ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref>, size_and_flags) + <ref refid="classdsa_1_1_t_l_s_f_1a06de927aa2f1743e93856f9429881a03" kindref="member">block_header_overhead</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="72" column="29" bodyfile="src/tlsf.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1ac4268e5c889fdf4b4781cf7d7e113464" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::block_size_min</definition>
        <argsstring></argsstring>
        <name>block_size_min</name>
        <qualifiedname>dsa::TLSF::block_size_min</qualifiedname>
        <initializer>= sizeof(<ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref>) - sizeof(<ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref>*)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="74" column="29" bodyfile="src/tlsf.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsa_1_1_t_l_s_f_1a53417c63ebdd45bcc2f4955856929444" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t dsa::TLSF&lt; SLI &gt;::block_size_max</definition>
        <argsstring></argsstring>
        <name>block_size_max</name>
        <qualifiedname>dsa::TLSF::block_size_max</qualifiedname>
        <initializer>= static_cast&lt;size_t&gt;(1 &lt;&lt; <ref refid="classdsa_1_1_t_l_s_f_1aca7f46fa2019c78935d41e6b70576285" kindref="member">FL_INDEX_MAX</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="75" column="29" bodyfile="src/tlsf.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1aa3b06851f567dc4366f71faf793d278c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t dsa::TLSF&lt; SLI &gt;::get_size</definition>
        <argsstring>(const BlockHeader *block)</argsstring>
        <name>get_size</name>
        <qualifiedname>dsa::TLSF::get_size</qualifiedname>
        <param>
          <type>const <ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="98" column="26" bodyfile="src/tlsf.hpp" bodystart="98" bodyend="101"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a1d0e453b3030deeb7f4e5537a4bdcaa1" compoundref="tlsf_8hpp" startline="363" endline="369">dsa::TLSF&lt; 5 &gt;::absorb</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1aee18af47433b4624c23364b9a0e6ad6d" compoundref="tlsf_8hpp" startline="541" endline="550">dsa::TLSF&lt; 5 &gt;::block_size</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a271e026d5fb745b208a474b99c51c99f" compoundref="tlsf_8hpp" startline="347" endline="350">dsa::TLSF&lt; 5 &gt;::can_split</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1aaed5056de4768b8781b5c29d0ce257c6" compoundref="tlsf_8hpp" startline="480" endline="529">dsa::TLSF&lt; 5 &gt;::check</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a0dc5ae2b42c39b8ebafbb0cd4d5ac5a7" compoundref="tlsf_8hpp" startline="341" endline="346">dsa::TLSF&lt; 5 &gt;::insert</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1adcbc2cc8ec2a8e348b2f7c12fb74c013" compoundref="tlsf_8hpp" startline="117" endline="117">dsa::TLSF&lt; 5 &gt;::is_last</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1afacb1adf4c48b2d06cafaa71b9f884d9" compoundref="tlsf_8hpp" startline="428" endline="443">dsa::TLSF&lt; 5 &gt;::locate_free</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a95fb2325991390b7e21889d5f212e231" compoundref="tlsf_8hpp" startline="175" endline="181">dsa::TLSF&lt; 5 &gt;::next</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1ad8b1895322339e22c5206069f2bb5300" compoundref="tlsf_8hpp" startline="182" endline="188">dsa::TLSF&lt; 5 &gt;::next_const</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a0618f620681909344d8bcef6844a02c8" compoundref="tlsf_8hpp" startline="333" endline="338">dsa::TLSF&lt; 5 &gt;::remove</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a75ecbddac7f300f34d8c255d6de22202" compoundref="tlsf_8hpp" startline="351" endline="362">dsa::TLSF&lt; 5 &gt;::split</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1af56ea62a64a94a3620be635004a433b4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::set_size</definition>
        <argsstring>(BlockHeader *block, size_t size)</argsstring>
        <name>set_size</name>
        <qualifiedname>dsa::TLSF::set_size</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="103" column="24" bodyfile="src/tlsf.hpp" bodystart="103" bodyend="106"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a1d0e453b3030deeb7f4e5537a4bdcaa1" compoundref="tlsf_8hpp" startline="363" endline="369">dsa::TLSF&lt; 5 &gt;::absorb</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a75ecbddac7f300f34d8c255d6de22202" compoundref="tlsf_8hpp" startline="351" endline="362">dsa::TLSF&lt; 5 &gt;::split</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a1c60aa4b3b12526b95628d9dba0c95be" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool dsa::TLSF&lt; SLI &gt;::is_free</definition>
        <argsstring>(const BlockHeader *block)</argsstring>
        <name>is_free</name>
        <qualifiedname>dsa::TLSF::is_free</qualifiedname>
        <param>
          <type>const <ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="108" column="24" bodyfile="src/tlsf.hpp" bodystart="108" bodyend="111"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1aaed5056de4768b8781b5c29d0ce257c6" compoundref="tlsf_8hpp" startline="480" endline="529">dsa::TLSF&lt; 5 &gt;::check</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a7b5ac458179b4ccc499b03d2cb10c10d" compoundref="tlsf_8hpp" startline="382" endline="393">dsa::TLSF&lt; 5 &gt;::merge_next</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1af2641f51b9b064d86a22c330d5c1bd84" compoundref="tlsf_8hpp" startline="370" endline="381">dsa::TLSF&lt; 5 &gt;::merge_prev</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a52605b6620223a08ca21559d318c91d0" compoundref="tlsf_8hpp" startline="394" endline="404">dsa::TLSF&lt; 5 &gt;::trim_free</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a7d4b158b6ac8cdff4023397b9ab3ced2" compoundref="tlsf_8hpp" startline="405" endline="415">dsa::TLSF&lt; 5 &gt;::trim_used</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1ac45a129e8e6228e0360fbc191652e9a6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool dsa::TLSF&lt; SLI &gt;::is_prev_free</definition>
        <argsstring>(const BlockHeader *block)</argsstring>
        <name>is_prev_free</name>
        <qualifiedname>dsa::TLSF::is_prev_free</qualifiedname>
        <param>
          <type>const <ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="112" column="24" bodyfile="src/tlsf.hpp" bodystart="112" bodyend="115"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1aaed5056de4768b8781b5c29d0ce257c6" compoundref="tlsf_8hpp" startline="480" endline="529">dsa::TLSF&lt; 5 &gt;::check</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1af2641f51b9b064d86a22c330d5c1bd84" compoundref="tlsf_8hpp" startline="370" endline="381">dsa::TLSF&lt; 5 &gt;::merge_prev</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a916561111ba5eefbd3fb72dba5232bfc" compoundref="tlsf_8hpp" startline="168" endline="172">dsa::TLSF&lt; 5 &gt;::prev</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1adcbc2cc8ec2a8e348b2f7c12fb74c013" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool dsa::TLSF&lt; SLI &gt;::is_last</definition>
        <argsstring>(const BlockHeader *block)</argsstring>
        <name>is_last</name>
        <qualifiedname>dsa::TLSF::is_last</qualifiedname>
        <param>
          <type>const <ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="117" column="24" bodyfile="src/tlsf.hpp" bodystart="117" bodyend="117"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a1d0e453b3030deeb7f4e5537a4bdcaa1" compoundref="tlsf_8hpp" startline="363" endline="369">dsa::TLSF&lt; 5 &gt;::absorb</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a7b5ac458179b4ccc499b03d2cb10c10d" compoundref="tlsf_8hpp" startline="382" endline="393">dsa::TLSF&lt; 5 &gt;::merge_next</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a95fb2325991390b7e21889d5f212e231" compoundref="tlsf_8hpp" startline="175" endline="181">dsa::TLSF&lt; 5 &gt;::next</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1ad8b1895322339e22c5206069f2bb5300" compoundref="tlsf_8hpp" startline="182" endline="188">dsa::TLSF&lt; 5 &gt;::next_const</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a5b817e5a0872cac294950e321bdf75ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::set_free</definition>
        <argsstring>(BlockHeader *block)</argsstring>
        <name>set_free</name>
        <qualifiedname>dsa::TLSF::set_free</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="119" column="24" bodyfile="src/tlsf.hpp" bodystart="119" bodyend="119"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a32b002299d6d511cfd4db6d6793d2a28" compoundref="tlsf_8hpp" startline="197" endline="203">dsa::TLSF&lt; 5 &gt;::mark_as_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a72f2bfdf752ce60b3af7301ea029bffb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::set_used</definition>
        <argsstring>(BlockHeader *block)</argsstring>
        <name>set_used</name>
        <qualifiedname>dsa::TLSF::set_used</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="121" column="24" bodyfile="src/tlsf.hpp" bodystart="121" bodyend="121"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a835dfcb50f18445e12725900519e3d12" compoundref="tlsf_8hpp" startline="205" endline="210">dsa::TLSF&lt; 5 &gt;::mark_as_used</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a8fa3eb30d8636dfb48c02ca7860ec733" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::set_prev_free</definition>
        <argsstring>(BlockHeader *block)</argsstring>
        <name>set_prev_free</name>
        <qualifiedname>dsa::TLSF::set_prev_free</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="123" column="24" bodyfile="src/tlsf.hpp" bodystart="123" bodyend="123"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a32b002299d6d511cfd4db6d6793d2a28" compoundref="tlsf_8hpp" startline="197" endline="203">dsa::TLSF&lt; 5 &gt;::mark_as_free</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a52605b6620223a08ca21559d318c91d0" compoundref="tlsf_8hpp" startline="394" endline="404">dsa::TLSF&lt; 5 &gt;::trim_free</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a3caa818d20ad9f4c114c28b79b2d6904" compoundref="tlsf_8hpp" startline="416" endline="427">dsa::TLSF&lt; 5 &gt;::trim_free_leading</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a4fd943d469f8d3be81ba66e109f8340f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::set_prev_used</definition>
        <argsstring>(BlockHeader *block)</argsstring>
        <name>set_prev_used</name>
        <qualifiedname>dsa::TLSF::set_prev_used</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="124" column="24" bodyfile="src/tlsf.hpp" bodystart="124" bodyend="127"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a835dfcb50f18445e12725900519e3d12" compoundref="tlsf_8hpp" startline="205" endline="210">dsa::TLSF&lt; 5 &gt;::mark_as_used</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a7d4b158b6ac8cdff4023397b9ab3ced2" compoundref="tlsf_8hpp" startline="405" endline="415">dsa::TLSF&lt; 5 &gt;::trim_used</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a44438455c9817fbdaed949d5f0b21b8b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::set_size_and_flags</definition>
        <argsstring>(BlockHeader *block, size_t size, bool free_flag, bool last_flag)</argsstring>
        <name>set_size_and_flags</name>
        <qualifiedname>dsa::TLSF::set_size_and_flags</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>free_flag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>last_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="129" column="24" bodyfile="src/tlsf.hpp" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1ad3c09c50acbdbcd39ce1ef322b589392" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>static const void * dsa::TLSF&lt; SLI &gt;::to_ptr</definition>
        <argsstring>(const BlockHeader *block)</argsstring>
        <name>to_ptr</name>
        <qualifiedname>dsa::TLSF::to_ptr</qualifiedname>
        <param>
          <type>const <ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="136" column="30" bodyfile="src/tlsf.hpp" bodystart="136" bodyend="140"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a07deb05a505f94dfbd6eb637a151008a" compoundref="tlsf_8hpp" startline="317" endline="331">dsa::TLSF&lt; 5 &gt;::insert_free_block</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1ad8b1895322339e22c5206069f2bb5300" compoundref="tlsf_8hpp" startline="182" endline="188">dsa::TLSF&lt; 5 &gt;::next_const</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a75ecbddac7f300f34d8c255d6de22202" compoundref="tlsf_8hpp" startline="351" endline="362">dsa::TLSF&lt; 5 &gt;::split</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a695ec978573cffb0ab2b9d9e28068e02" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * dsa::TLSF&lt; SLI &gt;::to_ptr_nc</definition>
        <argsstring>(BlockHeader *block)</argsstring>
        <name>to_ptr_nc</name>
        <qualifiedname>dsa::TLSF::to_ptr_nc</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="141" column="24" bodyfile="src/tlsf.hpp" bodystart="141" bodyend="145"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a95fb2325991390b7e21889d5f212e231" compoundref="tlsf_8hpp" startline="175" endline="181">dsa::TLSF&lt; 5 &gt;::next</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a9a2d2201883d300bf1568e53c09297c4" compoundref="tlsf_8hpp" startline="444" endline="455">dsa::TLSF&lt; 5 &gt;::prepare_used</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a75ecbddac7f300f34d8c255d6de22202" compoundref="tlsf_8hpp" startline="351" endline="362">dsa::TLSF&lt; 5 &gt;::split</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a0d8439adae15c9e8c26088702bcd3561" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static const BlockHeader * dsa::TLSF&lt; SLI &gt;::from_ptr</definition>
        <argsstring>(const void *ptr)</argsstring>
        <name>from_ptr</name>
        <qualifiedname>dsa::TLSF::from_ptr</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="146" column="37" bodyfile="src/tlsf.hpp" bodystart="146" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1afd2921b2dac73664c9bdadff7abd6eb6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * dsa::TLSF&lt; SLI &gt;::from_ptr_nc</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>from_ptr_nc</name>
        <qualifiedname>dsa::TLSF::from_ptr_nc</qualifiedname>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="151" column="31" bodyfile="src/tlsf.hpp" bodystart="151" bodyend="155"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1aee18af47433b4624c23364b9a0e6ad6d" compoundref="tlsf_8hpp" startline="541" endline="550">dsa::TLSF&lt; 5 &gt;::block_size</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1af06d06e73cb9a3a3a4c48e2016ab5dc4" compoundref="tlsf_8hpp" startline="473" endline="478">dsa::TLSF&lt; 5 &gt;::default_walker</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1aed92fd15dfab650b5f73f49b3ec02069" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static const BlockHeader * dsa::TLSF&lt; SLI &gt;::offset_to_block</definition>
        <argsstring>(const void *ptr, size_t size)</argsstring>
        <name>offset_to_block</name>
        <qualifiedname>dsa::TLSF::offset_to_block</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="158" column="37" bodyfile="src/tlsf.hpp" bodystart="158" bodyend="161"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1ad8b1895322339e22c5206069f2bb5300" compoundref="tlsf_8hpp" startline="182" endline="188">dsa::TLSF&lt; 5 &gt;::next_const</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1abc81913bafee4d307d838896319a0ca1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * dsa::TLSF&lt; SLI &gt;::offset_to_block_nc</definition>
        <argsstring>(void *ptr, size_t size)</argsstring>
        <name>offset_to_block_nc</name>
        <qualifiedname>dsa::TLSF::offset_to_block_nc</qualifiedname>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="162" column="31" bodyfile="src/tlsf.hpp" bodystart="162" bodyend="165"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a95fb2325991390b7e21889d5f212e231" compoundref="tlsf_8hpp" startline="175" endline="181">dsa::TLSF&lt; 5 &gt;::next</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a75ecbddac7f300f34d8c255d6de22202" compoundref="tlsf_8hpp" startline="351" endline="362">dsa::TLSF&lt; 5 &gt;::split</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a916561111ba5eefbd3fb72dba5232bfc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * dsa::TLSF&lt; SLI &gt;::prev</definition>
        <argsstring>(const BlockHeader *block)</argsstring>
        <name>prev</name>
        <qualifiedname>dsa::TLSF::prev</qualifiedname>
        <param>
          <type>const <ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="168" column="31" bodyfile="src/tlsf.hpp" bodystart="168" bodyend="172"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1af2641f51b9b064d86a22c330d5c1bd84" compoundref="tlsf_8hpp" startline="370" endline="381">dsa::TLSF&lt; 5 &gt;::merge_prev</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a95fb2325991390b7e21889d5f212e231" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * dsa::TLSF&lt; SLI &gt;::next</definition>
        <argsstring>(BlockHeader *block)</argsstring>
        <name>next</name>
        <qualifiedname>dsa::TLSF::next</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="175" column="31" bodyfile="src/tlsf.hpp" bodystart="175" bodyend="181"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1ab7f459a80a15779948a5b3436caa0fb2" compoundref="tlsf_8hpp" startline="191" endline="196">dsa::TLSF&lt; 5 &gt;::link_next</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a835dfcb50f18445e12725900519e3d12" compoundref="tlsf_8hpp" startline="205" endline="210">dsa::TLSF&lt; 5 &gt;::mark_as_used</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a7b5ac458179b4ccc499b03d2cb10c10d" compoundref="tlsf_8hpp" startline="382" endline="393">dsa::TLSF&lt; 5 &gt;::merge_next</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1ad8b1895322339e22c5206069f2bb5300" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static const BlockHeader * dsa::TLSF&lt; SLI &gt;::next_const</definition>
        <argsstring>(const BlockHeader *block)</argsstring>
        <name>next_const</name>
        <qualifiedname>dsa::TLSF::next_const</qualifiedname>
        <param>
          <type>const <ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="182" column="37" bodyfile="src/tlsf.hpp" bodystart="182" bodyend="188"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1aaed5056de4768b8781b5c29d0ce257c6" compoundref="tlsf_8hpp" startline="480" endline="529">dsa::TLSF&lt; 5 &gt;::check</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1ab7f459a80a15779948a5b3436caa0fb2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * dsa::TLSF&lt; SLI &gt;::link_next</definition>
        <argsstring>(BlockHeader *block)</argsstring>
        <name>link_next</name>
        <qualifiedname>dsa::TLSF::link_next</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="191" column="31" bodyfile="src/tlsf.hpp" bodystart="191" bodyend="196"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a1d0e453b3030deeb7f4e5537a4bdcaa1" compoundref="tlsf_8hpp" startline="363" endline="369">dsa::TLSF&lt; 5 &gt;::absorb</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a32b002299d6d511cfd4db6d6793d2a28" compoundref="tlsf_8hpp" startline="197" endline="203">dsa::TLSF&lt; 5 &gt;::mark_as_free</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a52605b6620223a08ca21559d318c91d0" compoundref="tlsf_8hpp" startline="394" endline="404">dsa::TLSF&lt; 5 &gt;::trim_free</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a3caa818d20ad9f4c114c28b79b2d6904" compoundref="tlsf_8hpp" startline="416" endline="427">dsa::TLSF&lt; 5 &gt;::trim_free_leading</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a32b002299d6d511cfd4db6d6793d2a28" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::mark_as_free</definition>
        <argsstring>(BlockHeader *block)</argsstring>
        <name>mark_as_free</name>
        <qualifiedname>dsa::TLSF::mark_as_free</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="197" column="24" bodyfile="src/tlsf.hpp" bodystart="197" bodyend="203"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a75ecbddac7f300f34d8c255d6de22202" compoundref="tlsf_8hpp" startline="351" endline="362">dsa::TLSF&lt; 5 &gt;::split</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a835dfcb50f18445e12725900519e3d12" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::mark_as_used</definition>
        <argsstring>(BlockHeader *block)</argsstring>
        <name>mark_as_used</name>
        <qualifiedname>dsa::TLSF::mark_as_used</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="205" column="24" bodyfile="src/tlsf.hpp" bodystart="205" bodyend="210"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a9a2d2201883d300bf1568e53c09297c4" compoundref="tlsf_8hpp" startline="444" endline="455">dsa::TLSF&lt; 5 &gt;::prepare_used</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1afa49f068970ffe8c065baf6b112c7c32" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t dsa::TLSF&lt; SLI &gt;::align_up</definition>
        <argsstring>(size_t x, size_t align)</argsstring>
        <name>align_up</name>
        <qualifiedname>dsa::TLSF::align_up</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="211" column="26" bodyfile="src/tlsf.hpp" bodystart="211" bodyend="215"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a06b784dc5df9063ca8acd2c1b1e4d7fe" compoundref="tlsf_8hpp" startline="233" endline="242">dsa::TLSF&lt; 5 &gt;::adjust_request_size</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1adbb8bb2285eca7f84e3529b4207215d1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t dsa::TLSF&lt; SLI &gt;::align_down</definition>
        <argsstring>(size_t x, size_t align)</argsstring>
        <name>align_down</name>
        <qualifiedname>dsa::TLSF::align_down</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="217" column="26" bodyfile="src/tlsf.hpp" bodystart="217" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a7c1da7e5d6c2006a19c5692c8813fdd1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * dsa::TLSF&lt; SLI &gt;::align_ptr</definition>
        <argsstring>(const void *ptr, size_t align)</argsstring>
        <name>align_ptr</name>
        <qualifiedname>dsa::TLSF::align_ptr</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="223" column="24" bodyfile="src/tlsf.hpp" bodystart="223" bodyend="228"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a07deb05a505f94dfbd6eb637a151008a" compoundref="tlsf_8hpp" startline="317" endline="331">dsa::TLSF&lt; 5 &gt;::insert_free_block</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a75ecbddac7f300f34d8c255d6de22202" compoundref="tlsf_8hpp" startline="351" endline="362">dsa::TLSF&lt; 5 &gt;::split</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a06b784dc5df9063ca8acd2c1b1e4d7fe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t dsa::TLSF&lt; SLI &gt;::adjust_request_size</definition>
        <argsstring>(size_t size, size_t align)</argsstring>
        <name>adjust_request_size</name>
        <qualifiedname>dsa::TLSF::adjust_request_size</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="233" column="26" bodyfile="src/tlsf.hpp" bodystart="233" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a7aaa27582e40b9eabb7d4c03c5facb04" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::mapping_insert</definition>
        <argsstring>(size_t size, int *fli, int *sli)</argsstring>
        <name>mapping_insert</name>
        <qualifiedname>dsa::TLSF::mapping_insert</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fli</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sli</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="248" column="24" bodyfile="src/tlsf.hpp" bodystart="248" bodyend="265"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1aaed5056de4768b8781b5c29d0ce257c6" compoundref="tlsf_8hpp" startline="480" endline="529">dsa::TLSF&lt; 5 &gt;::check</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a0dc5ae2b42c39b8ebafbb0cd4d5ac5a7" compoundref="tlsf_8hpp" startline="341" endline="346">dsa::TLSF&lt; 5 &gt;::insert</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1aa795026851710838eac2340ab77c9a3f" compoundref="tlsf_8hpp" startline="267" endline="275">dsa::TLSF&lt; 5 &gt;::mapping_search</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a0618f620681909344d8bcef6844a02c8" compoundref="tlsf_8hpp" startline="333" endline="338">dsa::TLSF&lt; 5 &gt;::remove</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1aa795026851710838eac2340ab77c9a3f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::mapping_search</definition>
        <argsstring>(size_t size, int *fli, int *sli)</argsstring>
        <name>mapping_search</name>
        <qualifiedname>dsa::TLSF::mapping_search</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fli</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sli</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="267" column="24" bodyfile="src/tlsf.hpp" bodystart="267" bodyend="275"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1afacb1adf4c48b2d06cafaa71b9f884d9" compoundref="tlsf_8hpp" startline="428" endline="443">dsa::TLSF&lt; 5 &gt;::locate_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1ad2d8098eda4e9b2e07ea2d6e86a89262" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * dsa::TLSF&lt; SLI &gt;::search_suitable_block</definition>
        <argsstring>(Control *control, int *fli, int *sli)</argsstring>
        <name>search_suitable_block</name>
        <qualifiedname>dsa::TLSF::search_suitable_block</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fli</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sli</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="276" column="31" bodyfile="src/tlsf.hpp" bodystart="276" bodyend="297"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1afacb1adf4c48b2d06cafaa71b9f884d9" compoundref="tlsf_8hpp" startline="428" endline="443">dsa::TLSF&lt; 5 &gt;::locate_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a57e28078474fdc0853060430d5454920" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::remove_free_block</definition>
        <argsstring>(Control *control, BlockHeader *block, int fl, int sl)</argsstring>
        <name>remove_free_block</name>
        <qualifiedname>dsa::TLSF::remove_free_block</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="298" column="24" bodyfile="src/tlsf.hpp" bodystart="298" bodyend="316"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1afacb1adf4c48b2d06cafaa71b9f884d9" compoundref="tlsf_8hpp" startline="428" endline="443">dsa::TLSF&lt; 5 &gt;::locate_free</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a0618f620681909344d8bcef6844a02c8" compoundref="tlsf_8hpp" startline="333" endline="338">dsa::TLSF&lt; 5 &gt;::remove</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a07deb05a505f94dfbd6eb637a151008a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::insert_free_block</definition>
        <argsstring>(Control *control, BlockHeader *block, int fl, int sl)</argsstring>
        <name>insert_free_block</name>
        <qualifiedname>dsa::TLSF::insert_free_block</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="317" column="24" bodyfile="src/tlsf.hpp" bodystart="317" bodyend="331"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a0dc5ae2b42c39b8ebafbb0cd4d5ac5a7" compoundref="tlsf_8hpp" startline="341" endline="346">dsa::TLSF&lt; 5 &gt;::insert</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a0618f620681909344d8bcef6844a02c8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::remove</definition>
        <argsstring>(Control *control, BlockHeader *block)</argsstring>
        <name>remove</name>
        <qualifiedname>dsa::TLSF::remove</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="333" column="24" bodyfile="src/tlsf.hpp" bodystart="333" bodyend="338"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a7b5ac458179b4ccc499b03d2cb10c10d" compoundref="tlsf_8hpp" startline="382" endline="393">dsa::TLSF&lt; 5 &gt;::merge_next</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1af2641f51b9b064d86a22c330d5c1bd84" compoundref="tlsf_8hpp" startline="370" endline="381">dsa::TLSF&lt; 5 &gt;::merge_prev</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a0dc5ae2b42c39b8ebafbb0cd4d5ac5a7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::insert</definition>
        <argsstring>(Control *control, BlockHeader *block)</argsstring>
        <name>insert</name>
        <qualifiedname>dsa::TLSF::insert</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="341" column="24" bodyfile="src/tlsf.hpp" bodystart="341" bodyend="346"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a52605b6620223a08ca21559d318c91d0" compoundref="tlsf_8hpp" startline="394" endline="404">dsa::TLSF&lt; 5 &gt;::trim_free</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a3caa818d20ad9f4c114c28b79b2d6904" compoundref="tlsf_8hpp" startline="416" endline="427">dsa::TLSF&lt; 5 &gt;::trim_free_leading</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a7d4b158b6ac8cdff4023397b9ab3ced2" compoundref="tlsf_8hpp" startline="405" endline="415">dsa::TLSF&lt; 5 &gt;::trim_used</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a271e026d5fb745b208a474b99c51c99f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool dsa::TLSF&lt; SLI &gt;::can_split</definition>
        <argsstring>(BlockHeader *block, size_t size)</argsstring>
        <name>can_split</name>
        <qualifiedname>dsa::TLSF::can_split</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="347" column="24" bodyfile="src/tlsf.hpp" bodystart="347" bodyend="350"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a52605b6620223a08ca21559d318c91d0" compoundref="tlsf_8hpp" startline="394" endline="404">dsa::TLSF&lt; 5 &gt;::trim_free</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a3caa818d20ad9f4c114c28b79b2d6904" compoundref="tlsf_8hpp" startline="416" endline="427">dsa::TLSF&lt; 5 &gt;::trim_free_leading</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a7d4b158b6ac8cdff4023397b9ab3ced2" compoundref="tlsf_8hpp" startline="405" endline="415">dsa::TLSF&lt; 5 &gt;::trim_used</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a75ecbddac7f300f34d8c255d6de22202" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * dsa::TLSF&lt; SLI &gt;::split</definition>
        <argsstring>(BlockHeader *block, size_t size)</argsstring>
        <name>split</name>
        <qualifiedname>dsa::TLSF::split</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="351" column="31" bodyfile="src/tlsf.hpp" bodystart="351" bodyend="362"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a52605b6620223a08ca21559d318c91d0" compoundref="tlsf_8hpp" startline="394" endline="404">dsa::TLSF&lt; 5 &gt;::trim_free</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a3caa818d20ad9f4c114c28b79b2d6904" compoundref="tlsf_8hpp" startline="416" endline="427">dsa::TLSF&lt; 5 &gt;::trim_free_leading</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a7d4b158b6ac8cdff4023397b9ab3ced2" compoundref="tlsf_8hpp" startline="405" endline="415">dsa::TLSF&lt; 5 &gt;::trim_used</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a1d0e453b3030deeb7f4e5537a4bdcaa1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * dsa::TLSF&lt; SLI &gt;::absorb</definition>
        <argsstring>(BlockHeader *prev, BlockHeader *block)</argsstring>
        <name>absorb</name>
        <qualifiedname>dsa::TLSF::absorb</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="363" column="31" bodyfile="src/tlsf.hpp" bodystart="363" bodyend="369"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a7b5ac458179b4ccc499b03d2cb10c10d" compoundref="tlsf_8hpp" startline="382" endline="393">dsa::TLSF&lt; 5 &gt;::merge_next</referencedby>
        <referencedby refid="classdsa_1_1_t_l_s_f_1af2641f51b9b064d86a22c330d5c1bd84" compoundref="tlsf_8hpp" startline="370" endline="381">dsa::TLSF&lt; 5 &gt;::merge_prev</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1af2641f51b9b064d86a22c330d5c1bd84" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * dsa::TLSF&lt; SLI &gt;::merge_prev</definition>
        <argsstring>(Control *control, BlockHeader *block)</argsstring>
        <name>merge_prev</name>
        <qualifiedname>dsa::TLSF::merge_prev</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="370" column="31" bodyfile="src/tlsf.hpp" bodystart="370" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a7b5ac458179b4ccc499b03d2cb10c10d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * dsa::TLSF&lt; SLI &gt;::merge_next</definition>
        <argsstring>(Control *control, BlockHeader *block)</argsstring>
        <name>merge_next</name>
        <qualifiedname>dsa::TLSF::merge_next</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="382" column="31" bodyfile="src/tlsf.hpp" bodystart="382" bodyend="393"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a7d4b158b6ac8cdff4023397b9ab3ced2" compoundref="tlsf_8hpp" startline="405" endline="415">dsa::TLSF&lt; 5 &gt;::trim_used</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a52605b6620223a08ca21559d318c91d0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::trim_free</definition>
        <argsstring>(Control *control, BlockHeader *block, size_t size)</argsstring>
        <name>trim_free</name>
        <qualifiedname>dsa::TLSF::trim_free</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="394" column="24" bodyfile="src/tlsf.hpp" bodystart="394" bodyend="404"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1a9a2d2201883d300bf1568e53c09297c4" compoundref="tlsf_8hpp" startline="444" endline="455">dsa::TLSF&lt; 5 &gt;::prepare_used</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a7d4b158b6ac8cdff4023397b9ab3ced2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::trim_used</definition>
        <argsstring>(Control *control, BlockHeader *block, size_t size)</argsstring>
        <name>trim_used</name>
        <qualifiedname>dsa::TLSF::trim_used</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="405" column="24" bodyfile="src/tlsf.hpp" bodystart="405" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a3caa818d20ad9f4c114c28b79b2d6904" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * dsa::TLSF&lt; SLI &gt;::trim_free_leading</definition>
        <argsstring>(Control *control, BlockHeader *block, size_t size)</argsstring>
        <name>trim_free_leading</name>
        <qualifiedname>dsa::TLSF::trim_free_leading</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="416" column="31" bodyfile="src/tlsf.hpp" bodystart="416" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1afacb1adf4c48b2d06cafaa71b9f884d9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
        <definition>static BlockHeader * dsa::TLSF&lt; SLI &gt;::locate_free</definition>
        <argsstring>(Control *control, size_t size)</argsstring>
        <name>locate_free</name>
        <qualifiedname>dsa::TLSF::locate_free</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="428" column="31" bodyfile="src/tlsf.hpp" bodystart="428" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a9a2d2201883d300bf1568e53c09297c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * dsa::TLSF&lt; SLI &gt;::prepare_used</definition>
        <argsstring>(Control *control, BlockHeader *block, size_t size)</argsstring>
        <name>prepare_used</name>
        <qualifiedname>dsa::TLSF::prepare_used</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_block_header" kindref="compound">BlockHeader</ref> *</type>
          <declname>block</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="444" column="24" bodyfile="src/tlsf.hpp" bodystart="444" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1ab0d208e1982ce713b1ef6fd7a6cb2336" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::initialise_control</definition>
        <argsstring>(Control *control)</argsstring>
        <name>initialise_control</name>
        <qualifiedname>dsa::TLSF::initialise_control</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="456" column="24" bodyfile="src/tlsf.hpp" bodystart="456" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1af06d06e73cb9a3a3a4c48e2016ab5dc4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dsa::TLSF&lt; SLI &gt;::default_walker</definition>
        <argsstring>(void *ptr, size_t size, int used, void *user)</argsstring>
        <name>default_walker</name>
        <qualifiedname>dsa::TLSF::default_walker</qualifiedname>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>used</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="473" column="24" bodyfile="src/tlsf.hpp" bodystart="473" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1aaed5056de4768b8781b5c29d0ce257c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int dsa::TLSF&lt; SLI &gt;::check</definition>
        <argsstring>(Control *control)</argsstring>
        <name>check</name>
        <qualifiedname>dsa::TLSF::check</qualifiedname>
        <param>
          <type><ref refid="structdsa_1_1_t_l_s_f_1_1_control" kindref="compound">Control</ref> *</type>
          <declname>control</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="480" column="23" bodyfile="src/tlsf.hpp" bodystart="480" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1ab1504ff0e4c8fc95be7a591016c1bcdb" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static constexpr size_t dsa::TLSF&lt; SLI &gt;::cabinets</definition>
        <argsstring>()</argsstring>
        <name>cabinets</name>
        <qualifiedname>dsa::TLSF::cabinets</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="532" column="36" bodyfile="src/tlsf.hpp" bodystart="532" bodyend="532"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1aaed5056de4768b8781b5c29d0ce257c6" compoundref="tlsf_8hpp" startline="480" endline="529">dsa::TLSF&lt; 5 &gt;::check</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1ab40635b4daeb1e0327e1760e31511a80" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static constexpr size_t dsa::TLSF&lt; SLI &gt;::shelves</definition>
        <argsstring>()</argsstring>
        <name>shelves</name>
        <qualifiedname>dsa::TLSF::shelves</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="533" column="36" bodyfile="src/tlsf.hpp" bodystart="533" bodyend="533"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1aaed5056de4768b8781b5c29d0ce257c6" compoundref="tlsf_8hpp" startline="480" endline="529">dsa::TLSF&lt; 5 &gt;::check</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a94184fce9ea53ceedd787ceb6d328c74" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static constexpr size_t dsa::TLSF&lt; SLI &gt;::total_shelves</definition>
        <argsstring>()</argsstring>
        <name>total_shelves</name>
        <qualifiedname>dsa::TLSF::total_shelves</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="534" column="36" bodyfile="src/tlsf.hpp" bodystart="534" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a9618212c00b858005a7e7c4d3891d992" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static constexpr size_t dsa::TLSF&lt; SLI &gt;::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <qualifiedname>dsa::TLSF::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="535" column="36" bodyfile="src/tlsf.hpp" bodystart="535" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1aa368212269f0ea11be46c699c43cc548" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static constexpr size_t dsa::TLSF&lt; SLI &gt;::align_size</definition>
        <argsstring>()</argsstring>
        <name>align_size</name>
        <qualifiedname>dsa::TLSF::align_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="536" column="36" bodyfile="src/tlsf.hpp" bodystart="536" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a89ba8da1eed88f7ce1540d3b8dbfb10b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static constexpr size_t dsa::TLSF&lt; SLI &gt;::min_block_size</definition>
        <argsstring>()</argsstring>
        <name>min_block_size</name>
        <qualifiedname>dsa::TLSF::min_block_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="537" column="36" bodyfile="src/tlsf.hpp" bodystart="537" bodyend="537"/>
        <referencedby refid="classdsa_1_1_t_l_s_f_1aaed5056de4768b8781b5c29d0ce257c6" compoundref="tlsf_8hpp" startline="480" endline="529">dsa::TLSF&lt; 5 &gt;::check</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a8c4a779e143cd73fe56782c936795dd6" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static constexpr size_t dsa::TLSF&lt; SLI &gt;::max_block_size</definition>
        <argsstring>()</argsstring>
        <name>max_block_size</name>
        <qualifiedname>dsa::TLSF::max_block_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="538" column="36" bodyfile="src/tlsf.hpp" bodystart="538" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a5d88bfb8ba87a80e7f69cf7e02a40244" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static constexpr size_t dsa::TLSF&lt; SLI &gt;::pool_overhead</definition>
        <argsstring>()</argsstring>
        <name>pool_overhead</name>
        <qualifiedname>dsa::TLSF::pool_overhead</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="539" column="36" bodyfile="src/tlsf.hpp" bodystart="539" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1a1e7328266ccc90058b455aea1ba93746" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static constexpr size_t dsa::TLSF&lt; SLI &gt;::alloc_overhead</definition>
        <argsstring>()</argsstring>
        <name>alloc_overhead</name>
        <qualifiedname>dsa::TLSF::alloc_overhead</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="540" column="36" bodyfile="src/tlsf.hpp" bodystart="540" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classdsa_1_1_t_l_s_f_1aee18af47433b4624c23364b9a0e6ad6d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t dsa::TLSF&lt; SLI &gt;::block_size</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>block_size</name>
        <qualifiedname>dsa::TLSF::block_size</qualifiedname>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tlsf.hpp" line="541" column="26" bodyfile="src/tlsf.hpp" bodystart="541" bodyend="550"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/tlsf.hpp" line="37" column="1" bodyfile="src/tlsf.hpp" bodystart="38" bodyend="551"/>
    <listofallmembers>
      <member refid="classdsa_1_1_t_l_s_f_1a1d0e453b3030deeb7f4e5537a4bdcaa1" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>absorb</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a06b784dc5df9063ca8acd2c1b1e4d7fe" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>adjust_request_size</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1adbb8bb2285eca7f84e3529b4207215d1" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>align_down</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a7c1da7e5d6c2006a19c5692c8813fdd1" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>align_ptr</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a9e9ae52d67bb0faf1920c4c4b8376adc" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>ALIGN_SIZE</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1aa368212269f0ea11be46c699c43cc548" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>align_size</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ab129613ed2f692569608a6e438c60d43" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>ALIGN_SIZE_LOG2</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1afa49f068970ffe8c065baf6b112c7c32" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>align_up</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a1e7328266ccc90058b455aea1ba93746" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>alloc_overhead</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a882d30dfb67c91f27dffe235be08421b" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>BLOCK_ALIGNMENT</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a06de927aa2f1743e93856f9429881a03" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>block_header_overhead</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1aee18af47433b4624c23364b9a0e6ad6d" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>block_size</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a53417c63ebdd45bcc2f4955856929444" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>block_size_max</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ac4268e5c889fdf4b4781cf7d7e113464" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>block_size_min</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ad0a3c2a58f2ac0c556c0e826b310f0e7" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>block_start_offset</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ab1504ff0e4c8fc95be7a591016c1bcdb" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>cabinets</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a271e026d5fb745b208a474b99c51c99f" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>can_split</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1aaed5056de4768b8781b5c29d0ce257c6" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>check</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1af06d06e73cb9a3a3a4c48e2016ab5dc4" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>default_walker</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a4a3f725786424821919caeda3fc46c31" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>FL_INDEX_COUNT</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1aca7f46fa2019c78935d41e6b70576285" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>FL_INDEX_MAX</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a8d8e01ead196273867c2b41e8927ca76" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>FL_INDEX_SHIFT</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ae5fb2e3596c3c6e5b158f1ea583b57ad" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>flag_mask</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a03169d6bc1a82126fb21b79025546622" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>free_bit</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a0d8439adae15c9e8c26088702bcd3561" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>from_ptr</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1afd2921b2dac73664c9bdadff7abd6eb6" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>from_ptr_nc</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1aa3b06851f567dc4366f71faf793d278c" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>get_size</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ab0d208e1982ce713b1ef6fd7a6cb2336" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>initialise_control</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a0dc5ae2b42c39b8ebafbb0cd4d5ac5a7" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>insert</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a07deb05a505f94dfbd6eb637a151008a" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>insert_free_block</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a1c60aa4b3b12526b95628d9dba0c95be" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>is_free</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1adcbc2cc8ec2a8e348b2f7c12fb74c013" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>is_last</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ac45a129e8e6228e0360fbc191652e9a6" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>is_prev_free</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ab7f459a80a15779948a5b3436caa0fb2" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>link_next</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1afacb1adf4c48b2d06cafaa71b9f884d9" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>locate_free</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a7aaa27582e40b9eabb7d4c03c5facb04" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>mapping_insert</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1aa795026851710838eac2340ab77c9a3f" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>mapping_search</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a32b002299d6d511cfd4db6d6793d2a28" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>mark_as_free</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a835dfcb50f18445e12725900519e3d12" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>mark_as_used</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a8c4a779e143cd73fe56782c936795dd6" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>max_block_size</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a7b5ac458179b4ccc499b03d2cb10c10d" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>merge_next</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1af2641f51b9b064d86a22c330d5c1bd84" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>merge_prev</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a89ba8da1eed88f7ce1540d3b8dbfb10b" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>min_block_size</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a95fb2325991390b7e21889d5f212e231" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>next</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ad8b1895322339e22c5206069f2bb5300" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>next_const</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1aed92fd15dfab650b5f73f49b3ec02069" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>offset_to_block</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1abc81913bafee4d307d838896319a0ca1" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>offset_to_block_nc</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a5d88bfb8ba87a80e7f69cf7e02a40244" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>pool_overhead</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a9a2d2201883d300bf1568e53c09297c4" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>prepare_used</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a916561111ba5eefbd3fb72dba5232bfc" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>prev</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1aa8384db13c8af386f1d045f57c4ab2a2" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>prev_free_bit</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a0618f620681909344d8bcef6844a02c8" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>remove</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a57e28078474fdc0853060430d5454920" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>remove_free_block</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ad2d8098eda4e9b2e07ea2d6e86a89262" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>search_suitable_block</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a5b817e5a0872cac294950e321bdf75ea" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>set_free</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a8fa3eb30d8636dfb48c02ca7860ec733" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>set_prev_free</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a4fd943d469f8d3be81ba66e109f8340f" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>set_prev_used</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1af56ea62a64a94a3620be635004a433b4" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>set_size</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a44438455c9817fbdaed949d5f0b21b8b" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>set_size_and_flags</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a72f2bfdf752ce60b3af7301ea029bffb" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>set_used</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ab40635b4daeb1e0327e1760e31511a80" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>shelves</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a9618212c00b858005a7e7c4d3891d992" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>size</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a7f65c711cb6725696970774320d73895" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>SL_INDEX_LOG2</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a7c40f02bc93658db4abe068103a35db5" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>SLI_COUNT</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ac3ccc1c32d236a03bb2f0382b59557fd" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>SMALL_BLOCK_SIZE</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a75ecbddac7f300f34d8c255d6de22202" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>split</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a5c41d39610f61b576a64cb4e02dd565c" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>static_assert__LINE__</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a4dd5874169334b079e6886a53c795589" prot="private" virt="non-virtual"><scope>dsa::TLSF</scope><name>static_assert__LINE__</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ac2e907fdaba5c8fc4c9185a632d8efe6" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>tlsf_walker</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a87a00ee083c05e19c43adac02c5d2c26" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>tlsfptr_t</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1ad3c09c50acbdbcd39ce1ef322b589392" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>to_ptr</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a695ec978573cffb0ab2b9d9e28068e02" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>to_ptr_nc</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a94184fce9ea53ceedd787ceb6d328c74" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>total_shelves</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a52605b6620223a08ca21559d318c91d0" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>trim_free</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a3caa818d20ad9f4c114c28b79b2d6904" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>trim_free_leading</name></member>
      <member refid="classdsa_1_1_t_l_s_f_1a7d4b158b6ac8cdff4023397b9ab3ced2" prot="public" virt="non-virtual"><scope>dsa::TLSF</scope><name>trim_used</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
